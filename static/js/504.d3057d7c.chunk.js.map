{"version":3,"file":"static/js/504.d3057d7c.chunk.js","mappings":"mTAEMA,EAAW,6BACXC,EAAU,mCACVC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,wNAIOC,EAAmB,mCAAG,sGACVC,EAAAA,EAAAA,IAAA,UAClBR,EADkB,wDACsCC,GAC3DC,GAH+B,uBACzBO,EADyB,EACzBA,KADyB,kBAK1BA,GAL0B,2CAAH,qDAQnBC,EAAiB,mCAAG,WAAMC,GAAN,yFACRH,EAAAA,EAAAA,IAAA,UAClBR,EADkB,oBACEW,EADF,mCACoCV,GACzDC,GAH6B,uBACvBO,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBG,EAAiB,mCAAG,WAAMD,GAAN,yFACRH,EAAAA,EAAAA,IAAA,UAClBR,EADkB,oBACEW,EADF,2CAC4CV,GACjEC,GAH6B,uBACvBO,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBI,EAAiB,mCAAG,WAAMF,GAAN,yFACRH,EAAAA,EAAAA,IAAA,UAClBR,EADkB,oBACEW,EADF,2CAC4CV,GACjEC,GAH6B,uBACvBO,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBK,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,yFACPR,EAAAA,EAAAA,IAAA,UAClBR,EADkB,iCACee,EADf,oDACgEC,EADhE,oBACgFf,GACrGC,GAH4B,uBACtBO,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,uD,6MC9ChBQ,EAAoBC,EAAAA,GAAAA,GAAH,2CAGjBC,EAAqBD,EAAAA,GAAAA,EAAH,6DAIlBE,EAAoBF,EAAAA,GAAAA,GAAH,8C,SCFjBG,EAAU,WACrB,IAAQV,GAAYW,EAAAA,EAAAA,MAAZX,QACR,GAAkCY,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,MAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAwCN,EAAAA,EAAAA,UAAS,GAAjD,eAAOO,EAAP,KAAqBC,EAArB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,oGAEIP,GAAa,GAFjB,UAG+BZ,EAAAA,EAAAA,IAAkBF,GAHjD,OAGUsB,EAHV,OAIIJ,EAAWI,EAAaC,SACxBH,EAAgBE,EAAaE,eALjC,gDAOIR,EAAS,KAAMS,SAPnB,yBASIX,GAAa,GATjB,6EALc,sBACTd,GADS,mCAiBd0B,EACD,GAAE,CAAC1B,KAGF,2BACa,OAAVe,IAAkB,uBAAG,kDACrBF,IACC,SAAC,KAAD,CACEc,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IAGA,OAAZd,IACC,SAACX,EAAD,UACGW,EAAQe,KAAI,SAAAC,GAAG,OACd,UAACxB,EAAD,YACE,SAACD,EAAD,UAAqByB,EAAIC,UACzB,uBAAID,EAAIE,YAFcF,EAAIG,GADd,MAQF,IAAjBjB,IAAsB,uBAAG,gDAG/B,EAED,G","sources":["api/api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = 'c386e8b288993af3daa930866edd5828';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMzg2ZThiMjg4OTkzYWYzZGFhOTMwODY2ZWRkNTgyOCIsInN1YiI6IjY0ZjhjMGUwZmZjOWRlMDBjNGExZWI0MCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSJYj5_qh9lA0FcInIa0sGWqA44kBSzQ826duTlAxt0',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/trending/movie/day?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n  return data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n\n  return data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n\n  return data;\n};\n\nexport const fetchMovieSearch = async (query, page) => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`,\n    options\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const ReviewsListStyled = styled.ul`\nmax-width: 950px;\n`\nexport const ReviewsTitleStyled = styled.p`\nfont-size: 18px;\nfont-weight: 500;\n`\nexport const ReviewsItemStyled = styled.li`\nmargin-bottom: 45px;\n`","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { fetchMovieReviews } from 'api/api';\nimport {ReviewsListStyled, ReviewsTitleStyled, ReviewsItemStyled} from './Reviews.styled';\n\nexport const Reviews = () => {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reviews, setReviews] = useState(null);\n  const [totalReviews, setTotalReviews] = useState(0);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    async function movieReviews() {\n      try {\n        setIsLoading(true);\n        const fetchReviews = await fetchMovieReviews(movieId);\n        setReviews(fetchReviews.results);\n        setTotalReviews(fetchReviews.total_results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    movieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {error !== null && <p>Oops, something went wrong. please, try later</p>}\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {reviews !== null && (\n        <ReviewsListStyled>\n          {reviews.map(rev => (\n            <ReviewsItemStyled key={rev.id}>\n              <ReviewsTitleStyled>{rev.author}</ReviewsTitleStyled>\n              <p>{rev.content}</p>\n            </ReviewsItemStyled>\n          ))}\n        </ReviewsListStyled>\n      )}\n      {totalReviews === 0 && <p>We don't have any reviews for this movie.</p>}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","API_KEY","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","data","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","fetchMovieSearch","query","page","ReviewsListStyled","styled","ReviewsTitleStyled","ReviewsItemStyled","Reviews","useParams","useState","isLoading","setIsLoading","error","setError","reviews","setReviews","totalReviews","setTotalReviews","useEffect","fetchReviews","results","total_results","message","movieReviews","strokeColor","strokeWidth","animationDuration","width","visible","map","rev","author","content","id"],"sourceRoot":""}