{"version":3,"file":"static/js/387.ccccb9b6.chunk.js","mappings":"mTAEMA,EAAW,6BACXC,EAAU,mCACVC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,wNAIOC,EAAmB,mCAAG,sGACVC,EAAAA,EAAAA,IAAA,UAClBR,EADkB,wDACsCC,GAC3DC,GAH+B,uBACzBO,EADyB,EACzBA,KADyB,kBAK1BA,GAL0B,2CAAH,qDAQnBC,EAAiB,mCAAG,WAAMC,GAAN,yFACRH,EAAAA,EAAAA,IAAA,UAClBR,EADkB,oBACEW,EADF,mCACoCV,GACzDC,GAH6B,uBACvBO,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBG,EAAiB,mCAAG,WAAMD,GAAN,yFACRH,EAAAA,EAAAA,IAAA,UAClBR,EADkB,oBACEW,EADF,2CAC4CV,GACjEC,GAH6B,uBACvBO,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBI,EAAiB,mCAAG,WAAMF,GAAN,yFACRH,EAAAA,EAAAA,IAAA,UAClBR,EADkB,oBACEW,EADF,2CAC4CV,GACjEC,GAH6B,uBACvBO,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBK,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,yFACPR,EAAAA,EAAAA,IAAA,UAClBR,EADkB,iCACee,EADf,oDACgEC,EADhE,oBACgFf,GACrGC,GAH4B,uBACtBO,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,uD,8KC9ChBQ,EAAiBC,EAAAA,GAAAA,GAAH,gLAWdC,EAAiBD,EAAAA,GAAAA,GAAH,2C,SC8D3B,EArEa,WACX,IAAQP,GAAYS,EAAAA,EAAAA,MAAZT,QACR,GAAkCU,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,oGAEIL,GAAa,GAFjB,UAG4BX,EAAAA,EAAAA,IAAkBD,GAH9C,OAGUkB,EAHV,OAIIF,EAAQE,EAAUH,MAJtB,gDAMID,EAAS,KAAMK,SANnB,yBAQIP,GAAa,GARjB,6EALc,sBACTZ,GADS,mCAgBdoB,EACD,GAAE,CAACpB,KAGF,2BACa,OAAVa,IAAkB,uBAAG,kDACrBF,IACC,SAAC,KAAD,CACAU,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,kBACbC,MAAM,OACNC,gBAAgB,YAGR,OAATb,IACC,0BACE,SAACT,EAAD,UACGS,EAAKc,KAAI,SAAAC,GAAK,OACb,UAACtB,EAAD,WAC0B,OAAvBsB,EAAMC,cACL,gBACEC,IAAKF,EAAMG,KACXC,IAAI,yCAGN,gBACEF,IAAKF,EAAMG,KACXC,IAAG,wCAAmCJ,EAAMC,iBAIhD,uBAAID,EAAMG,QACV,uBAAIH,EAAMK,cAdSL,EAAMM,GADd,QAqBH,KAAb,OAAJrB,QAAI,IAAJA,OAAA,EAAAA,EAAMsB,UAAgB,uBAAG,6CAG/B,C","sources":["api/api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = 'c386e8b288993af3daa930866edd5828';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMzg2ZThiMjg4OTkzYWYzZGFhOTMwODY2ZWRkNTgyOCIsInN1YiI6IjY0ZjhjMGUwZmZjOWRlMDBjNGExZWI0MCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSJYj5_qh9lA0FcInIa0sGWqA44kBSzQ826duTlAxt0',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/trending/movie/day?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n  return data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n\n  return data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}`,\n    options\n  );\n\n  return data;\n};\n\nexport const fetchMovieSearch = async (query, page) => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`,\n    options\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const CastListStyled = styled.ul`\nlist-style: none;\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: left;\ncolumn-gap: 30px;\nrow-gap: 10px;\ntext-align: center;\nmargin-top: 35px;\n`\n\nexport const CastItemStyled = styled.li`\nmax-width: 185px;\n`","import { fetchMovieCredits } from 'api/api';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Discuss } from 'react-loader-spinner';\nimport { CastListStyled, CastItemStyled } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    async function movieCast() {\n      try {\n        setIsLoading(true);\n        const fetchCast = await fetchMovieCredits(movieId);\n        setCast(fetchCast.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    movieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {error !== null && <p>Oops, something went wrong. please, try later</p>}\n      {isLoading && (\n        <Discuss\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"comment-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"comment-wrapper\"\n        color=\"#fff\"\n        backgroundColor=\"#F4442E\"\n      />\n      )}\n      {cast !== null && (\n        <div>\n          <CastListStyled>\n            {cast.map(actor => (\n              <CastItemStyled key={actor.id}>\n                {actor.profile_path === null ? (\n                  <img\n                    alt={actor.name}\n                    src=\"https://via.placeholder.com/185x280\"\n                  />\n                ) : (\n                  <img\n                    alt={actor.name}\n                    src={`http://image.tmdb.org/t/p/w185${actor.profile_path}`}\n                  />\n                )}\n\n                <p>{actor.name}</p>\n                <p>{actor.character}</p>\n              </CastItemStyled>\n            ))}\n          </CastListStyled>\n        </div>\n      )}\n      {cast?.length === 0 && <p>We don't have any cast for this movie.</p>}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","data","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","fetchMovieSearch","query","page","CastListStyled","styled","CastItemStyled","useParams","useState","isLoading","setIsLoading","error","setError","cast","setCast","useEffect","fetchCast","message","movieCast","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","color","backgroundColor","map","actor","profile_path","alt","name","src","character","id","length"],"sourceRoot":""}